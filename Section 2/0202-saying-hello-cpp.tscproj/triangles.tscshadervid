{
    "code":  "\n  uniform vec4 _Color0;\n  uniform vec4 _Color1;\n  uniform float _Size;\n  uniform float _Direction;\n  float _Angle = 1.0472;\n  float _Speed = 2.5;\n  float _LineWidth = 8.;\n  float _Scale = 1.;\n\n  vec2 random( vec2 p ) {  \n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453); \n  }  \n  \n  void main() {  \n    vec2 uv = _TexCoord.xy;  \n    float aspect = _ImageSize.x/_ImageSize.y;  \n    uv = (uv-vec2(.5))*vec2(aspect, 1.);  \n    float numrows = _ImageSize.y/(_Size*_Scale);   \n    float progress = _Time/100.*_Speed;  \n    uv = uv+vec2(-cos(_Direction)*progress, sin(_Direction)*progress*_ImageSize.x/_ImageSize.y);   \n    float triangleHeight = 1./numrows;  \n    float triangleWidth = 2.0 * triangleHeight / tan(_Angle);   \n    float normalizedWidth = 2.0 / tan(_Angle);  \n    float row = floor(uv.y*numrows);    \n    float offset = mod(row, 2.) == 1. ? -triangleWidth/2. : 0.;  \n    float clm = floor((uv.x+offset)/(triangleWidth))*2.;  \n    float x = fract((uv.x+offset)/triangleWidth)*2./tan(_Angle);  \n    float y = fract(uv.y*numrows);  \n    clm = clm + step(normalizedWidth * (1. - y * .5), x);  \n    clm = clm - step(-y * .5*normalizedWidth, -x);    \n    float den = sqrt(1.+normalizedWidth*normalizedWidth/4.);    \n    float d = min (y,   min (1.-y,  min ( abs(x - normalizedWidth/2.*y)/den ,  abs(x + normalizedWidth/2.*y -normalizedWidth)/den ) ) );   \n    float circleSize = _LineWidth*_Scale/_ImageSize.y*numrows*.8;  \n    d = min ( d, distance(vec2(x, y), vec2(0.0))-circleSize);  \n    d = min ( d, distance(vec2(x, y), vec2(.5*normalizedWidth, 1.))-circleSize);  \n    d = min ( d, distance(vec2(x, y), vec2(normalizedWidth, 0.))-circleSize);   \n    float m= fract(length(random(vec2(clm, row))));    \n    m = (sin(_Time/2.*(1.+fract(length(random(vec2(row, clm)))))+m*4.)+1.)/2.*.999;    \n    \n    vec4 col = mix (_Color0, _Color1, m*.8);\n    float lineWidth = _LineWidth*_Scale/_ImageSize.y;  \n    col = mix(_Color1, col, smoothstep(lineWidth *.5 , lineWidth * 1.5, d));   \n    \n    _FragColor = vec4(col); }",
    "effectDef":  [
                      {
                          "name":  "Color0",
                          "type":  "Color",
                          "value":  "9DB4C0"
                      },
                      {
                          "name":  "Color1",
                          "type":  "Color",
                          "value":  "E0FBFC"
                      },
                      {
                          "defaultValue":  357.90,
                          "maxValue":  500.0,
                          "minValue":  0.5,
                          "name":  "Size",
                          "type":  "double"
                      },
                      {
                          "defaultValue":  0.7853982,
                          "name":  "Direction",
                          "type":  "double",
                          "unitType":  "radians",
                          "userInterfaceType":  "directional"
                      }
                  ],
    "height":  1080,
    "localizedName":  {
                          "en":  "Scrolling Triangles"
                      },
    "name":  "ScrollingTriangles",
    "signature":  {
                      "type":  "ES512",
                      "value":  "MIGIAkIAhI5DaVkSRb0K3zLo5mX1NHbylY5Otn/6HUx677hQgXG2IkD9U+b7uuQnYYmAWvEaDH+awXWP5TseQP6ztZcExgYCQgE5s9ongdXz8M9kJBuJXjCukHxyV3kZbNcst1gtnkJ2nqo/nmMyWj8sMb/F5lLXAS4Pz3FX8ilmmpjl6y5g2wzTvA=="
                  },
    "version":  1.0,
    "width":  1920,
    "copyright":  "Copyright ï¿½ 2023 TechSmith Corporation. All rights reserved."
}
